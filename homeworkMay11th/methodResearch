
** map ** - 
descripton: map is used when you want to get a new array and calling a function once for each of the elements in the current array, in order.

examples: 
1) let nums = [1, 4, 9]
   let roots = nums.map(function(num) {
       return Math.sqrt(num)
   })
        This returns [1, 2, 3]

2) let numbers = [65, 44, 12, 4];
   let newArray = numbers.map(function(num) {
        return num * 10;
    })
        This returns [650, 440, 120, 40]

3) let oatMilkPrice = [1.50, 1.75, 1.60, 2.00, 2.05, 1.45];
   let inflationIsAKiller = cookiePrices.map(cookie => {
	    let price = cookie * 1.05;
	    return price.toFixed(2);
    });
        This returns ["1.58", "1.84", "1.68", "2.10", "2.15", "1.52"]

console.log(newCookiePrices);

** reduce ** -
description: reduce takes and array and returns one value.

examples:
 1) var total = 0;
    1, 2, 3].forEach(function (num) {
            total += num;
    });

2) let net=[3]; //Array with one element.  
    let calc=net.reduce((accumulator,currentValue)=>accumulator+currentValue);  
    document.write("The total of the array element comes out to be: "+calc);  

3) const maxDate = dates.reduce((max, d) => d > max ? d : max, dates[0]); 

** filter ** - 

description: Creates a new array with all the elements that pass the test implemented in the function

examples:
  1) const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];
     const result = words.filter(word => word.length > 6);
     console.log(result);
     //output: Array ["exuberant", "destruction", "present"]

   2) const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
      nums.filter(function isEven(num) {
      return num % 2 === 0;
    }); // returns [2, 4, 6, 8, 10]

    3) const characters = [
        { name: 'Batman', team: 'Justice League' },
        { name: 'Hulk', team: 'Avengers' },
        { name: 'Flash', team: 'Justice League' },
        { name: 'Iron Man', team: 'Avengers' },
        { name: 'Deadpool', team: 'X-Force' }
    ];
        const avengers = characters.filter(character => character.team === 'Avengers');

** forEach ** - 

description: Loops through an array once for each element in the array.

examples:
  1) // Prints "a", "b", "c"
     ['a', 'b', 'c'].forEach(v => {
     console.log(v);
   });

  2) const arr = ['a', 'b', 'c'];
     arr.forEach((v, i) => {
     arr[i] = v.toUpperCase();
   });
     arr; // ['A', 'B', 'C']

  3) const obj = {
  a: 1,
  b: 2,
  c: 3
};
   // Prints "a", "b", "c"
    Object.keys(obj).forEach(key => console.log(key));

** sort ** -

description: sorts items in an array either numerically or alphabetic, ascending or descending

examples:
  
  1) let fruits = ["Banana", "Orange", "Apple", "Mango"];
     fruits.sort(); // ["Apple", "Banana", "Mango", "Orange"]

  2) const array1 = [1, 30, 4, 21, 100000];
      array1.sort();
      console.log(array1);
      // expected output: Array [1, 100000, 21, 30, 4]

  3) const months = ['March', 'Jan', 'Feb', 'Dec'];
     months.sort();
     console.log(months);
     // expected output: Array ["Dec", "Feb", "Jan", "March"]

** slice ** -

description: The slice() method returns a shallow copy of a portion of an array into a new array object selected from start to end (end not included) where start and end represent the index of items in that array. The original array will not be modified.

examples:

  1) const animals = ['ant', 'bison', 'camel', 'duck', 'elephant'];
     console.log(animals.slice(2));
     // expected output: Array ["camel", "duck", "elephant"]

  2) console.log(animals.slice(2, 4));
     // expected output: Array ["camel", "duck"]

  3) console.log(animals.slice(1, 5));
     // expected output: Array ["bison", "camel", "duck", "elephant"]

** pop **

description: Removes the last element from an array

examples: 

  1) const plants = ['broccoli', 'cauliflower', 'cabbage', 'kale', 'tomato'];
     console.log(plants.pop());
     // expected output: "tomato"

  2) console.log(plants);
     // expected output: Array ["broccoli", "cauliflower", "cabbage", "kale"]

  3) plants.pop();
     console.log(plants);
     // expected output: Array ["broccoli", "cauliflower", "cabbage"]


** shift ** -

description: removes the first element from an array

examples: 

  1) const array1 = [1, 2, 3];
     const firstElement = array1.shift();

  2) console.log(array1);
     // expected output: Array [2, 3]

  3) console.log(firstElement);
     // expected output: 1

** push ** -

description: adds an element to the end of an array

examples: 

  1) const animals = ['pigs', 'goats', 'sheep'];
     const count = animals.push('cows');
     console.log(count);
     // expected output: 4

  2) console.log(animals);
     // expected output: Array ["pigs", "goats", "sheep", "cows"]

  3) animals.push('chickens', 'cats', 'dogs');
     console.log(animals);
     // expected output: Array ["pigs", "goats", "sheep", "cows", "chickens", "cats", "dogs"]

** unshift ** -

description: Adds an element to the start of an array.

examples: 

  1) const array1 = [1, 2, 3];
     console.log(array1.unshift(4, 5));
     // expected output: 5

  2) console.log(array1);
     // expected output: Array [4, 5, 1, 2, 3]

  3) let fruits = ["Banana", "Orange", "Apple", "Mango"];
     fruits.unshift("Lemon","Pineapple");

** includes **

description: The includes() method determines whether an array includes a certain value among its entries, returning true or false as appropriate.

examples:

  1) const array1 = [1, 2, 3];
     console.log(array1.includes(2));
     // expected output: true

  2) const pets = ['cat', 'dog', 'bat'];
     console.log(pets.includes('cat'));
     // expected output: true

  3) console.log(pets.includes('at'));
     // expected output: false

** indexOf **

description: The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.

examples:

  1) const beasts = ['ant', 'bison', 'camel', 'duck', 'bison'];
     console.log(beasts.indexOf('bison'));
     // expected output: 1

  2) // start from index 2
     console.log(beasts.indexOf('bison', 2));
     // expected output: 4

  3) console.log(beasts.indexOf('giraffe'));
     // expected output: -1

** every **

description: The every() method tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.

examples:

  1) const isBelowThreshold = (currentValue) => currentValue < 40;
     const array1 = [1, 30, 39, 29, 10, 13];
     console.log(array1.every(isBelowThreshold));
     // expected output: true

  2) function isBigEnough(element, index, array) {
  return element >= 10;
}
[12, 5, 8, 130, 44].every(isBigEnough);   // false
[12, 54, 18, 130, 44].every(isBigEnough); // true

  3) [12, 5, 8, 130, 44].every(x => x >= 10);   // false
     [12, 54, 18, 130, 44].every(x => x >= 10); // true


Questions to practice:

One:
Given a non-empty array of integers, return the result of multiplying the values together in order. Example:
[1, 2, 3, 4] => 1 * 2 * 3 * 4 = 24

**Answer**
let arr = [1, 2, 3, 4]
return arr.reduce((acc, c) => acc * c)

Two:
You will be given an array of all the family members' ages, in any order. 
The ages will be given in whole numbers, so a baby of 5 months, will have an ascribed 'age' of 0. 
Return a new array with [youngest age, oldest age, difference between the youngest and oldest age].

let Arr = [3, 4, 6, 7]
let finalArr = []

finalArr.push(arr.sort([0]))

Three:
Sum all the numbers of the array except the highest and the lowest element (the value, not the index!).
Example:
[ 6, 2, 1, 8, 10 ] => 16
[ 1, 1, 11, 2, 3 ] => 6